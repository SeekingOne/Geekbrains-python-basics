"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.

Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class BreakEntryException(Exception):
    pass


class MyListCheck(Exception):
    def __init__(self, text):
        self.txt = text


def check_value(new_item):
    """
    Проверка значения с обработкой исключений

    :param new_item: значение - строка
    :return: значение в числовой форме
    """
    if new_item == "stop":
        raise BreakEntryException

    try:
        result = float(new_item)
    except ValueError:
        raise MyListCheck("Введенное значение - не число!")
    return result


my_list = []
while True:
    item = input("Введите элемент списка: ")
    try:
        my_list.append(check_value(item))
    except MyListCheck as err:
        print(err)
    except BreakEntryException:
        print(my_list)
        break
