"""
3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
(не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения
до целого числа.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
ячеек этих двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.
"""


class Cell:
    __symbol = "*"

    def __init__(self, nuclei):
        self.nuclei = nuclei

    def __rank(self, length):
        return self.__symbol * length

    def __str__(self):
        """
        Возвращает клетку в строковой форме для печати

        :return: клетка в виде строки
        """
        return self.__rank(self.nuclei)

    def __add__(self, other):
        """
        Возвращает сумму двух клеток.

        :param other: объект типа Cell
        :return: объект-сумма
        """
        if not isinstance(other, Cell):
            raise TypeError('Неверный тип оператора!')
        return Cell(self.nuclei + other.nuclei)

    def __sub__(self, other):
        """
        Возвращает разность двух клеток.

        :param other: объект типа Cell
        :return: объект-разность
        """
        if not isinstance(other, Cell):
            raise TypeError('Неверный тип оператора!')
        if other.nuclei > self.nuclei:
            raise ValueError('Недопустимое сочетание аргументов!')
        return Cell(self.nuclei - other.nuclei)

    def __mul__(self, other):
        """
        Возвращает произведение двух клеток.

        :param other: объект типа Cell
        :return: объект-произведение
        """
        if not isinstance(other, Cell):
            raise TypeError('Неверный тип оператора!')
        return Cell(self.nuclei * other.nuclei)

    def __truediv__(self, other):
        """
        Возвращает отношение двух клеток.

        :param other: объект типа Cell
        :return: объект-частное
        """
        if not isinstance(other, Cell):
            raise TypeError('Неверный тип оператора!')
        return Cell(self.nuclei // other.nuclei)

    def make_order(self, order: int):
        """
        Выводит клетку в виде матрицы со строкой длины order

        :param order: длина строки
        :return: матрица в строковой форме
        """
        if not order > 0:
            raise ValueError('Недопустимый аргумент!')
        ranks = self.nuclei // order
        last_rank = self.nuclei % order
        return (self.__rank(order) + "\n") * ranks + self.__rank(last_rank)


if __name__ == "__main__":
    cell_1 = Cell(5)
    cell_2 = Cell(3)

    print(f"Сумма клеток {cell_1} и {cell_2} равняется: {cell_1 + cell_2}")
    print(f"Разность клеток {cell_1} и {cell_2} равняется: {cell_1 - cell_2}")
    print(f"Упорядоченное произведение клеток {cell_1} и {cell_2} равняется:\n{(cell_1 * cell_2).make_order(6)}\n")
    print(f"Отношение клетки {cell_1} к клетке {cell_2} равняется: {cell_1 / cell_2}")
